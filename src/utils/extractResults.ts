import {ChannelResult, PlaylistResult, Thumbnail, VideoResult} from "@/components/interfaces"
import {extractInvidiousChannelThumbnail, generatePipedThumbnail} from "./thumbnailExtract"
import {formatViewNumber} from "./format"

export interface InvidiousVideo{
    author: string
    authorId: string
    authorUrl: string
    authorVerified: boolean
    description: string
    descriptionHTML: string
    isUpcoming: boolean
    lengthSeconds: number
    liveNow: boolean
    premium: boolean
    published: number
    publishedText: string
    title: string
    type: "video"
    videoThumbnails: Thumbnail[]
    videoId: string
    viewCount: number
    viewCountText: string
}
export interface InvidiousPlaylist{
    author: string
    authorId: string
    authorThumbnails: {
        width: number
        height: number
        url: string
    }[]
    authorUrl: string
    description: string
    descriptionHTML: string
    isListed: boolean
    playlistId: string
    playlistThumbnail: string
    subtitle: string | null
    title: string
    type: "playlist"
    updated: number
    videoCount: number
    videos: Pick<InvidiousVideo, "author" | "authorId" | "authorUrl" | "lengthSeconds" | "title" | "videoId" | "videoThumbnails">[]
    viewCount: number
}
export interface InvidiousChannel {
    type: string
    author: string
    authorId: string
    authorUrl: string
    authorVerified: boolean
    authorThumbnails: {
        url: string
        width: number
        height: number
    }[]
    autoGenerated: boolean
    subCount: number
    videoCount: number
    channelHandle: string
    description: string
    descriptionHtml: string
}
export interface PipedVideo {
    url: string
    type: string
    title: string
    thumbnail: string
    uploaderName: string
    uploaderUrl: string
    uploaderAvatar: string
    uploadedDate: string
    shortDescription: string
    duration: number
    views: number
    uploaded: number
    uploaderVerified: boolean
    isShort: boolean
}

export interface PipedPlaylist {
    url: string
    type: string
    name: string
    thumbnail: string
    uploaderName: string
    uploaderUrl: string
    uploaderVerified: boolean
    playlistType: string
    videos: number
}

export interface PipedChannel{
    url: string
    type: string
    name: string
    thumbnail: string
    description: string
    subscribers: number
    videos: number
    verified: boolean
}

export function extractInvidiousVideos(videos: InvidiousVideo[] | InvidiousVideo){
    if (videos.constructor.name !== "Array"){
        const video = videos as InvidiousVideo
        return {
            type: 'video',
            title: video.title,
            videoId: video.videoId,
            author: video.author,
            authorId: video.authorId,
            videoThumbnails: video.videoThumbnails,
            viewCount: video.viewCount,
            lengthSeconds: video.lengthSeconds
        } as VideoResult
    }
    else {
        const videoArr = videos as InvidiousVideo[]
        return videoArr.map(video => {
            return {
                type: 'video',
                title: video.title,
                videoId: video.videoId,
                author: video.author,
                authorId: video.authorId,
                videoThumbnails: video.videoThumbnails,
                viewCount: video.viewCount,
                lengthSeconds: video.lengthSeconds
            } as VideoResult
        })
    }
}

export function extractInvidiousPlaylists(playlists: InvidiousPlaylist[] | InvidiousPlaylist){
    if (playlists.constructor.name !== "Array"){
        const playlist = playlists as InvidiousPlaylist
        return {
            type: "playlist",
            title: playlist.title,
            playlistId: playlist.playlistId,
            author: playlist.author,
            authorId: playlist.authorId,
            playlistThumbnails: generatePipedThumbnail(playlist.playlistThumbnail),
            vidCount: playlist.videoCount
        } as PlaylistResult
    } else {
        const playlistArr = playlists as InvidiousPlaylist[];
        return playlistArr.map(playlist => {
            return {
                type: "playlist",
                title: playlist.title,
                playlistId: playlist.playlistId,
                author: playlist.author,
                authorId: playlist.authorId,
                playlistThumbnails: generatePipedThumbnail(playlist.playlistThumbnail),
                vidCount: playlist.videoCount
            } as PlaylistResult
        })
    }
}

export function extractInvidiousChannels(channels: InvidiousChannel[] | InvidiousChannel){
    if (channels.constructor.name !== "Array"){
        const channel = channels as InvidiousChannel
        return {
            type: 'channel',
            author: channel.author,
            authorId: channel.authorId,
            channelThumbnails: extractInvidiousChannelThumbnail(channel.authorThumbnails),
            subCount: formatViewNumber(channel.subCount)
        } as ChannelResult
    } else {
        const channelArr = channels as InvidiousChannel[]
        return channelArr.map(channel => {
            return {
                type: 'channel',
                author: channel.author,
                authorId: channel.authorId,
                channelThumbnails: extractInvidiousChannelThumbnail(channel.authorThumbnails),
                subCount: formatViewNumber(channel.subCount)
            } as ChannelResult
        })
    }
}

export function extractPipedVideos(videos: PipedVideo[] | PipedVideo){
    if(videos.constructor.name !== "Array"){
        const video = videos as PipedVideo
        return {
            type: 'video',
            title: video.title,
            videoId: video.url.replace(/^\/watch\?v=/, ''),
            author: video.uploaderName,
            authorId: video.uploaderUrl.replace(/^\/channel\//, ''),
                videoThumbnails: generatePipedThumbnail(video.thumbnail),
            viewCount: video.views,
            lengthSeconds: video.duration
        }
    } else {
        const videoArr = videos as PipedVideo[]
        return videoArr.map(video => {
            return {
                type: 'video',
                title: video.title,
                videoId: video.url.replace(/^\/watch\?v=/, ''),
                author: video.uploaderName,
                authorId: video.uploaderUrl.replace(/^\/channel\//, ''),
                    videoThumbnails: generatePipedThumbnail(video.thumbnail),
                viewCount: video.views,
                lengthSeconds: video.duration
            }
        })
    }
}

export function extractPipedPlaylist(playlists: PipedPlaylist[] | PipedPlaylist){
    if (playlists.constructor.name !== "Array"){
        const playlist = playlists as PipedPlaylist
        return {
            type: "playlist",
            title: playlist.name,
            playlistId: playlist.url.replace(/\/playlist\?list=/, ''),
            author: playlist.uploaderName,
            authorId: playlist.uploaderUrl.replace(/^\/channel\//, ''),
                playlistThumbnails: generatePipedThumbnail(playlist.thumbnail),
            vidCount: playlist.videos
        } as PlaylistResult
    } else {
        const playlistArr = playlists as PipedPlaylist[]
        return playlistArr.map(playlist => {
            return {
                type: "playlist",
                title: playlist.name,
                playlistId: playlist.url.replace(/\/playlist\?list=/, ''),
                author: playlist.uploaderName,
                authorId: playlist.uploaderUrl.replace(/^\/channel\//, ''),
                    playlistThumbnails: generatePipedThumbnail(playlist.thumbnail),
                vidCount: playlist.videos
            } as PlaylistResult
        })
    }
}

export function extractPipedChannel(channels: PipedChannel[] | PipedChannel){
    if (channels.constructor.name !== "Array"){
        const channel = channels as PipedChannel
        return {
            type: 'channel',
            author: channel.name,
            authorId: channel.url.replace(/^\/channel\//, ''),
            channelThumbnails: generatePipedThumbnail(channel.thumbnail),
            subCount: formatViewNumber(channel.subscribers)
        } as ChannelResult
    } else {
        const channelArr = channels as PipedChannel[]
        return channelArr.map(channel => {
            return {
                type: 'channel',
                author: channel.name,
                authorId: channel.url.replace(/^\/channel\//, ''),
                channelThumbnails: generatePipedThumbnail(channel.thumbnail),
                subCount: formatViewNumber(channel.subscribers)
            } as ChannelResult
        })
    }
}
